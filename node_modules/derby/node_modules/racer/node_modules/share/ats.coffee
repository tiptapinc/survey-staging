
json = require('ottypes').json0




auth = (action, callback) ->

rules = (data, client) ->
  return disallow() if snapshot.acct? and snapshot.acct isnt client.user.acct

  return disallow() if path is 'accountId'

  allow()





sanitizeComponent = (c) ->


sanitizeOp = (op) ->
  result = []
  for c in op
    newC = sanitizeComponent c
    result.push newC if newC

  result


backend.addExtension (req, next) ->
  next 'forbidden'





share.use 'connect', (req, callback) ->
  req.session.accountId = req.session.headers.session.accountId # or something
  callback()

share.use 'submit', (req, callback) ->
  if req.snapshot?.accountId && action.snapshot.accountId isnt agent.accountId
    callback 'forbidden'
  else
    callback()
  
share.use 'validate', (result, callback) ->
  if result.snapshot.accountId isnt agent.accountId
    callback 'forbidden'
  else
    callback()



  switch req.action
    when 'connect'
      req.session.accountId = agent.stream.accountId

      return callback 'forbidden' if !agent.accountId
      # Probably need to add admin fields, etc.

      callback()
  
    when 'submit'
      if action.snapshot?.accountId && action.snapshot.accountId isnt agent.accountId
        callback 'forbidden'
      else
        callback()

    when 'validate'
      if action.snapshot.accountId isnt agent.accountId
        callback 'forbidden'
      else
        callback()

    when 'query'
      # Queries must Must MUST match the user's account.
      q = action.query.$query || action.query
      q['data.accountId'] = agent.accountId
      callback()

    when 'fetch'
      if action.snapshot?.accountId && action.snapshot.accountId isnt agent.accountId
        callback 'forbidden'
      else
        callback()
    



backend.addExtension (req, next) ->
  if req.action is 'fetch'



